---
layout: post
title:  "Skip List"
date:   2014-11-04 12:00:00
categories: Code
---

最近一直在研究NOSQL数据库，不管是[SSDB](http://ssdb.io/) 还是taobao的[TAIR](http://tair.taobao.org/) ，都用到了[LevelDB](http://code.google.com/p/leveldb/) 这个底层的储存引擎。

在LevelDB中有一个核心的数据结构叫Skip List，Skip List有着和优化过的平衡二叉树相当的时间复杂度，却比平衡二叉树更容易实现。

链表的一大优点在于其容易插入、删除，但却只能进行顺序查找。Skip List是链表的一种扩展，主要优化了链表的查找效率。

<img src="/images/skiplist1.png" width="673px" height="343px" />

如图链表中的值，非递减顺序排列。
- 图a：为了查找单链表中的某个值，最坏情况下需要将链表全部遍历一遍，需要遍历n个节点。
- 图b：每2个节点存储了它后面第2个节点，知识最多需要遍历`n/2 + 1`个节点。
- 图c：图b基础上每4个节点存储前面第4个节点内容，这时最多遍历`n/4 + 2`个节点。`(n/4 + 4/2)`
- 图d：如果每`2^i`个节点都指向前面`2^i`个节点，寻找一个节点的复杂度变成logn(类似于二分查找)。虽然这种结构查找很快但是插入删除却很复杂。

有着k个前向指针(farword pointers)的节点叫做level k node。如果每`2^i`的节点指向前面`2^i`个后继节点，那么节点的分布情况为：50% 在第一层，25%在第二层，12.5%在第3层。如果所有节点的层数是随机挑选的。节点第i个前向指针指向后面第`2^(i-1)`个节点。插入和删除只需要局部修改少数指针，节点的层数(level)在插入时随机选取，并且以后不需要修改。虽然有一些指针的排列会导致很坏的运行时间，但是这些情况很少出现。

<img src="/images/skiplist2.png" width="673px" height="265px" />

